
框架：也就是接口+抽象类，抽象类实现一些公共的功能，留下一些业务上的逻辑接口
使用框架的人直接继承抽象类即可，其他具体的逻辑由留下的接口或是自定义接口完成

			游戏脚本Mannager(唯一入口)（mmo游戏fr）
			(init游戏时就需要把模块注册进去)
gamecontroller需要保存已经取出的流程，这样涉及到流程切换一些字段就不需要从容器中取
	然后在容器中注册几个模块(登入模块，游戏地图1，游戏地图2，下线模块，多模块交互)
			（其中流程都继承用一个接口）
init游戏，
然后new 出该ui的ab资源注意new的时候需要给路径(这一层面相当于mvc的view)
这一层相当于View被实例出来了游戏物体也随之创建
所以观察者应该有2个一个为中介者与中介一个
中介者与controller一个
其中每一个controller都是通过观察者与自己的中介者沟通
controller通过订阅事件来达到接收中介的消息

框架整体流程切换使用了状态者模式，当需要某一状态通知gameController切换状态，游戏的流程开始改变
整个游戏主要靠2部分贯彻
中介者 和 不可销毁中介者
中介是游戏主要逻辑运行  不可销毁为中介可有，可无具体需要根据业务需求。
中介者与 不可销毁可能会有业务逻辑层面的互动可使用需要使用一个观察者来进行互动
游戏具体的运行为通过中介者的管理创建出(MVC)中的controller由controller进行具体的游戏逻辑
controller 中包含 View ，Module ，
在中介者可能包含多个Controller，Controller通过观察者与自己的父类沟通实现每个controller的互动
其中View为显示层可理解为移动
module为数据层可理解为一个数据类型，该数据类型包含一个gameobject
controller为操作层通过
controller操作然后在module取得gameobject，最后调用view层操作

